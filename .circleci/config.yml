version: 2.1
commands:
  set_app_version:
    description: "Set app version string"
    steps:
      - run:
          name: create app version string
          command: |
            DATE=$(date '+%Y-%m-%d')
            VERSION=${DATE}.${CIRCLE_BUILD_NUM}
            echo "Created version string: ${VERSION}"
            echo "export VERSION=$VERSION" >> $BASH_ENV
      - mem/remember:
          env_var: APP_VERSION
          value: "${VERSION}"
  setup:
    #    TODO: Delete
    description: "Install tools and configure kubectl"
    steps:
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.2.4
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
            kubectl -n "${KUBE_ENV_NAMESPACE}" get pods
  setup-live:
    description: "Install tools and configure kubectl"
    steps:
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.2.4
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
            kubectl -n "${KUBE_ENV_NAMESPACE}" get pods
  deploy_to_env:
#    TODO: Delete
    parameters:
      env:
        type: string
    steps:
      - setup
      - mem/recall:
          env_var: APP_VERSION
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            helm upgrade prepare-a-case ~/git/helm_deploy/prepare-a-case/. \
              --install --wait --reset-values --timeout 360s \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --description="${APP_VERSION} - ${CIRCLE_BUILD_URL}" \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --values ~/git/helm_deploy/prepare-a-case/values-live1.yaml \
              --set image.tag="${APP_VERSION}"
  deploy_to_live_env:
    parameters:
      env:
        type: string
    steps:
      - setup-live
      - mem/recall:
          env_var: APP_VERSION
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            helm upgrade prepare-a-case ~/git/helm_deploy/prepare-a-case/. \
              --install --wait --reset-values --timeout 360s \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --description="${APP_VERSION} - ${CIRCLE_BUILD_URL}" \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --values ~/git/helm_deploy/prepare-a-case/values-live.yaml \
              --set image.tag="${APP_VERSION}"
executors:
  deployer:
    docker:
      - image: cimg/python:3.9.2
    working_directory: ~/app
  builder:
    docker:
      - image: cimg/node:14.18.1-browsers
    working_directory: ~/app
  integration-tests:
    docker:
      - image: cimg/node:14.18.1-browsers
      - image: bitnami/redis:5.0
        environment:
          ALLOW_EMPTY_PASSWORD=yes
    working_directory: ~/app

orbs:
  helm: circleci/helm@1.1.2
  kubernetes: circleci/kubernetes@0.3.0
  mem: circleci/rememborb@0.0.1
  snyk: snyk/snyk@0.0.10

_snyk_options: &snyk_options
  organization: "digital-probation-services"
  severity-threshold: "high" # note: this does not affect snyk 'monitor' commands
  fail-on-issues: true

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - set_app_version
      - attach_workspace:
          at: ~/app
      - restore_cache:
          keys:
            - dependencies-cache-{{ checksum "package.json" }}
            - dependencies-cache
      - run:
          name: Install dependencies
          command: npm ci
      - run:
          name: Build css
          command: npm run css-build
      - run:
          name: Minify js and css
          command: npm run minify-js-css
      - save_cache:
          key: dependencies-cache-{{ checksum "package.json" }}
          paths:
            - ~/.cache
      - persist_to_workspace:
          root: ~/app
          paths: .

  lint:
    executor: builder
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependencies-cache-{{ checksum "package.json" }}
      - run:
          name: Lint
          halt_build_on_fail: false
          command: npm run lint

  test:
    executor: builder
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependencies-cache-{{ checksum "package.json" }}
      - run:
          name: Unit tests
          command: npm run unit-test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage

  integration_test:
    executor: integration-tests
    steps:
      - checkout
      - mem/recall:
          env_var: APP_VERSION
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependencies-cache-{{ checksum "package.json" }}
      - run:
          name: Build css
          command: npm run css-build
      - run:
          name: Minify js and css
          command: npm run minify-js-css
      - run:
          name: Run wiremock
          command: java -jar wiremock-jre8-standalone-2.32.0.jar --global-response-templating --port 9091
          background: true
      - run:
          name: Run the app
          command: npm run start-feature
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 5
      - run:
          name: Run integration tests
          halt_build_on_fail: false
          command: npm run int-test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: integration-tests/videos
      - store_artifacts:
          path: integration-tests/screenshots

  pact:
    environment:
      PACT_BROKER_DISABLE_SSL_VERIFICATION: "true"
    executor: builder
    steps:
      - checkout
      - mem/recall:
          env_var: APP_VERSION
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependencies-cache-{{ checksum "package.json" }}
      - run:
          name: Generate pact files
          halt_build_on_fail: false
          command: npm run pact-test
      - store_artifacts:
          path: 'pact/pacts'
      - run:
          name: Upload pact files to broker
          command: |
            npx pact-broker publish pact/pacts \
              --broker-base-url $PACT_BROKER_BASE_URL \
              --consumer-app-version $CIRCLE_SHA1 --tag $CIRCLE_BRANCH \
              -u $PACT_BROKER_USERNAME -p $PACT_BROKER_PASSWORD

  build_docker:
    executor: deployer
    parameters:
      main:
        type: boolean
        default: false
    steps:
      - checkout
      - mem/recall:
          env_var: APP_VERSION
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: |
            docker build --pull \
               --rm=false . \
               --tag "mojdigitalstudio/prepare-a-case:$APP_VERSION" \
               --label "maintainer=info@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1" \
               --build-arg BUILD_NUMBER=$APP_VERSION \
               --build-arg GIT_REF=$CIRCLE_SHA1 \
      - when:
          condition: << parameters.main >>
          steps:
            - run:
                name: Publish to docker hub
                command: |
                  docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                  docker tag mojdigitalstudio/prepare-a-case:$APP_VERSION mojdigitalstudio/prepare-a-case:latest
                  docker push mojdigitalstudio/prepare-a-case:$APP_VERSION
                  docker push mojdigitalstudio/prepare-a-case:latest

  app_scan:
    executor: builder
    parameters:
      main:
        type: boolean
        default: false
    steps:
      - checkout
      - snyk/scan:
          project: '${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}'
          monitor-on-build: << parameters.main >>
          <<: *snyk_options

  image_scan:
    executor: deployer
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - snyk/scan:
          project: '${CIRCLE_PROJECT_REPONAME}-docker/${CIRCLE_BRANCH}'
          docker-image-name: 'mojdigitalstudio/prepare-a-case:latest'
          target-file: 'Dockerfile'
          monitor-on-build: true
          <<: *snyk_options
# TODO: Delete
  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"
# TODO: END

  deploy_live_dev:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "dev"
  deploy_live_preprod:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "preprod"
  deploy_live_prod:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "prod"

workflows:
  version: 2
  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - app_scan:
          main: true
      - image_scan

  build-test-and-deploy:
    jobs:
      - app_scan:
          filters:
            branches:
              ignore: main
      - app_scan:
          name: app_scan_main
          filters:
            branches:
              only: main
          main: true
      - build:
          filters:
            tags:
              ignore: /.*/
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - integration_test:
          requires:
            - build
      - pact:
          requires:
            - build
      - build_docker:
          requires:
            - build
          filters:
            branches:
              ignore: main
      - build_docker:
          name: build_docker_main
          requires:
            - build
          filters:
            branches:
              only: main
          main: true
      - image_scan:
          requires:
            - build_docker_main
          filters:
            branches:
              only: main
#              TODO: DELETE
      - deploy_dev:
          requires:
            - build_docker_main
          filters:
            branches:
              only: main
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: court-probation-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: court-probation-prod
          requires:
            - request-prod-approval
#          TODO: END
      - deploy_live_dev:
          context: court-probation-live-dev
          requires:
            - build_docker_main
          filters:
            branches:
              only: main
      - request-live-preprod-approval:
          type: approval
          requires:
            - deploy_live_dev
      - deploy_live_preprod:
          context: court-probation-live-preprod
          requires:
            - request-live-preprod-approval
      - request-live-prod-approval:
          type: approval
          requires:
            - deploy_preprod
#      - deploy_live_prod:
#          context: court-probation-live-prod
#          requires:
#            - request-live-prod-approval
