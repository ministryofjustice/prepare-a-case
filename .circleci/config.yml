version: 2.1
commands:
  setup:
    description: "Install tools and configure kubectl"
    steps:
      - kubernetes/install
      - helm/install-helm-client:
          version: v2.13.1
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
            kubectl -n "${KUBE_ENV_NAMESPACE}" get pods
  deploy_to_env:
    parameters:
      env:
        type: string
    steps:
      - setup
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            APP_VERSION=$(egrep buildNumber build-info.json | awk -F"\"" '{print $4}')
            helm upgrade prepare-a-case ~/git/helm_deploy/prepare-a-case/. \
              --install --wait --force --reset-values --timeout 360 \
              --tiller-namespace=${KUBE_ENV_NAMESPACE} \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --description="${APP_VERSION} - ${CIRCLE_BUILD_URL}" \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --set image.tag="${APP_VERSION}"
      - store_artifacts:
          path: build-info.json
executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:
    docker:
      - image: circleci/node:12.13.0-browsers
    working_directory: ~/app

orbs:
  kubernetes: circleci/kubernetes@0.3.0
  helm: circleci/helm@0.1.2

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          keys:
            - dependencies-cache-{{ checksum "package.json" }}
            - dependencies-cache
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          key: dependencies-cache-{{ checksum "package.json" }}
          paths:
            - ~/.cache
      - run:
          name: Record the Application Version
          command: |
            DATE=$(date '+%Y-%m-%d')
            export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
            export GIT_REF="$CIRCLE_SHA1"
            yarn record-build-info
      - persist_to_workspace:
          root: ~/app
          paths: .

  test:
    executor: builder
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependencies-cache-{{ checksum "package.json" }}
      - run:
          name: Lint
          command: yarn lint
      - run:
          name: Unit tests
          command: yarn unit-test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage

  integration_test:
    executor: builder
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - restore_cache:
          key: dependencies-cache-{{ checksum "package.json" }}
      - run:
          name: Run wiremock
          command: java -jar wiremock-standalone-2.25.1.jar --global-response-templating --port 9091
          background: true
      - run:
          name: Run the app
          command: yarn start
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 5
      - run:
          name: Run integration tests
          command: yarn int-test
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: integration-tests/videos
      - store_artifacts:
          path: integration-tests/screenshots

  build_docker:
    executor: deployer
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container and publish to docker hub
          command: |
            APP_VERSION=$(egrep buildNumber build-info.json  | awk -F"\"" '{print $4}')
            docker build --rm=false . \
               --tag "mojdigitalstudio/prepare-a-case:$APP_VERSION" \
               --label "maintainer=info@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1"

            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              # publish to docker hub as the tag
             docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
             docker tag mojdigitalstudio/prepare-a-case:$APP_VERSION mojdigitalstudio/prepare-a-case:latest
             docker push mojdigitalstudio/prepare-a-case:$APP_VERSION
             docker push mojdigitalstudio/prepare-a-case:latest
            fi

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - test:
          requires:
            - build
      - integration_test:
          requires:
            - test
      - build_docker:
          requires:
            - integration_test
          filters:
            branches:
              only: master
      - deploy_dev:
          requires:
            - build_docker
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: court-probation-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: court-probation-prod
          requires:
            - request-prod-approval
