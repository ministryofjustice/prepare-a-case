version: 2.1

commands:
  setup-live:
    description: "Install tools and configure kubectl"
    steps:
      - kubernetes/install
      - helm/install-helm-client:
          version: v3.2.4
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="${KUBE_ENV_API}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
            kubectl -n "${KUBE_ENV_NAMESPACE}" get pods
  deploy_to_live_env:
    parameters:
      env:
        type: string
    steps:
      - setup-live
      - mem/recall:
          env_var: APP_VERSION
      - checkout:
          path: ~/git
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            helm upgrade prepare-a-case ~/git/helm_deploy/prepare-a-case/. \
              --install --wait --reset-values --timeout 360s \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --description="${APP_VERSION} - ${CIRCLE_BUILD_URL}" \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --values ~/git/helm_deploy/prepare-a-case/values-live.yaml \
              --set image.tag="${APP_VERSION}"

executors:
  deployer:
    docker:
      - image: cimg/python:3.9.11
    working_directory: ~/app
  builder:
    docker:
      - image: cimg/base:current
    working_directory: ~/app

orbs:
  helm: circleci/helm@1.2.0
  kubernetes: circleci/kubernetes@1.3.0
  mem: circleci/rememborb@0.0.2
  hmpps: ministryofjustice/hmpps@11

parameters:
  alerts-slack-channel:
    type: string
    default: probation_in_court_dev

  node-version:
    type: string
    default: 20.17.0-browsers

jobs:
  set_app_version:
    executor: builder
    steps:
      - run:
          name: create app version string
          command: |
            DATE=$(date '+%Y-%m-%d')
            VERSION=${DATE}.${CIRCLE_BUILD_NUM}
            echo "Created version string: ${VERSION}"
            echo "export VERSION=$VERSION" >> $BASH_ENV
      - mem/remember:
          env_var: APP_VERSION
          value: "${VERSION}"

  test_lint_unit_pact:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Fake local env file
          command: echo "" > .env
      - run:
          name: Start X11 virtual framebuffer server (if not running)
          command: Xvfb :99 || true
          background: true
      - run:
          name: Start services
          command: docker compose up -d --wait
      - run:
          name: Log services
          command: docker compose logs -f -t > services.log
          background: true
      - run:
          name: Lint Test
          command: docker exec -it prepare-a-case-app /usr/src/app/node_modules/.bin/standard
      - run:
          name: Unit Test
          command: docker exec -e ENABLE_HEARING_OUTCOMES=false -it prepare-a-case-app /usr/src/app/node_modules/.bin/jest --config=./tests/jest.config.js --detectOpenHandles --ci --forceExit
      #- run:
      #    name: Pact Test
      #    halt_build_on_fail: false
      #    command: docker exec -it prepare-a-case-app /usr/src/app/node_modules/.bin/jest --config=./tests/jest.pact.config.js --detectOpenHandles --ci --forceExit
      - run:
          name: Run integration tests
          command: DISPLAY=:99 docker compose -f compose/docker-compose.cypress-run.yml up --abort-on-container-exit
      - store_artifacts:
          path: integration-tests/output
      - store_artifacts:    
          path: services.log
  pact_push:
    environment:
      PACT_BROKER_DISABLE_SSL_VERIFICATION: "true"
    executor: builder
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Development Image
          command: docker build --target=ci -t prepare-a-case-app -f Dockerfile .
      - run:
          name: Generate pact files
          halt_build_on_fail: false
          command: docker run -it prepare-a-case-app /usr/src/app/node_modules/.bin/jest --config=./tests/jest.pact.config.js --ci
      - store_artifacts:
          path: 'pact/pacts'
      - run:
          name: Upload pact files to broker
          command: docker run -it prepare-a-case-app /usr/src/app/node_modules/.bin/pact-broker publish pact/pacts --broker-base-url $PACT_BROKER_BASE_URL --consumer-app-version $CIRCLE_SHA1 --tag $CIRCLE_BRANCH -u $PACT_BROKER_USERNAME -p $PACT_BROKER_PASSWORD"
  build:
    executor: deployer
    parameters:
      main:
        type: boolean
        default: false
    steps:
      - checkout
      - mem/recall:
          env_var: APP_VERSION
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build docker image
          command: |
            docker build --target=production --pull \
               --rm=false . \
               --tag "hmpps/prepare-a-case:$APP_VERSION" \
               --label "maintainer=info@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1" \
               --build-arg BUILD_NUMBER=$APP_VERSION \
               --build-arg GIT_REF=$CIRCLE_SHA1 \
      - when:
          condition: << parameters.main >>
          steps:
            - run:
                name: Publish to docker hub
                command: |
                  docker login -u="${QUAYIO_USERNAME}" -p="${QUAYIO_PASSWORD}" quay.io
                  docker tag hmpps/prepare-a-case:$APP_VERSION quay.io/hmpps/prepare-a-case:$APP_VERSION
                  docker tag hmpps/prepare-a-case:$APP_VERSION quay.io/hmpps/prepare-a-case:latest
                  docker push quay.io/hmpps/prepare-a-case:$APP_VERSION
                  docker push quay.io/hmpps/prepare-a-case:latest
  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_live_env:
          env: "prod"

workflows:
  version: 2

  build-test-and-deploy:
    jobs:
      - test_lint_unit_pact:
          context: [hmpps-common-vars]
      - set_app_version:
          filters:
            branches:
              only: main
      #- pact_push:
      #    context: [hmpps-common-vars]
      #    requires:
      #      - set_app_version
      - build:
          name: build
          context: [hmpps-common-vars]
          main: true
          requires:
            - set_app_version
      - deploy_dev:
          context:
            - hmpps-common-vars
          requires:
            - build
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context:
            - court-probation-live-preprod
            - hmpps-common-vars
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context:
            - court-probation-live-prod
            - hmpps-common-vars
          requires:
            - request-prod-approval
  security:
    triggers:
      - schedule:
          cron: "30 16 * * 1-5"
          filters:
            branches:
              only:
                - PIC-4652/fix-security-vulnerabilities
    jobs:
      # - check_outdated:
      #     context:
      #       - hmpps-common-vars
      # - hmpps/npm_security_audit:
      #     slack_channel: << pipeline.parameters.alerts-slack-channel >>
      #     context:
      #       - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      # - hmpps/veracode_pipeline_scan:
      #     slack_channel: << pipeline.parameters.alerts-slack-channel >>
      #     context:
      #       - veracode-credentials
      #       - hmpps-common-vars
  # security-weekly:
  #   triggers:
  #     - schedule:
  #         cron: "0 5 * * 1"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - hmpps/veracode_policy_scan:
  #         slack_channel: << pipeline.parameters.alerts-slack-channel >>
  #         context:
  #           - veracode-credentials
  #           - hmpps-common-vars